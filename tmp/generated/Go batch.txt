GO

{'ids': [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], 'language': [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], 'batch_size': 32, 'code_word_rep': tensor([[28558,  3781, 25451,  ..., 19427, 15413, 29618],
        [28558,  3781, 25451,  ..., 19427, 15413, 29618],
        [28558,  3781,  4766,  ..., 19427, 15413, 29618],
        ...,
        [28558,  3781, 25451,  ..., 19427, 15413, 29618],
        [28558,  3781, 25451,  ..., 19427, 15413, 29618],
        [28558,  3781, 25451,  ..., 19427, 15413, 29618]]), 'code_char_rep': None, 'code_type_rep': None, 'code_mask_rep': None, 'code_len': tensor([70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
        70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70]), 'summ_word_rep': tensor([[    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 11544,  3122,  4064,  4528, 16658,  3122, 15846, 14212,  4500,
          9172,  2529, 16532,  3459,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3]]), 'summ_char_rep': None, 'summ_len': tensor([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]), 'tgt_seq': tensor([[    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 11544,  3122,  4064,  4528, 16658,  3122, 15846, 14212,  4500,
          9172,  2529, 16532,  3459,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3],
        [    2, 10802,  6598,  2519, 14447, 15846, 11794,  6468,  4548,  9391,
         13109, 10701, 16203, 10701,     3]]), 'code_text': ['func ( service * Vbox Port Type ) IEvent Sourceget Event ( request * IEvent Sourceget Event ) ( * IEvent Sourceget Event Response , error ) { response : = new ( IEvent Sourceget Event Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IMachineget Settings Modified ( request * IMachineget Settings Modified ) ( * IMachineget Settings Modified Response , error ) { response : = new ( IMachineget Settings Modified Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( p * Parser ) Parse Line ( s string ) ( telegraf . Metric , error ) { metrics , err : = p . Parse ( [ ] byte ( s ) ) if err ! = nil { return nil , err } if len ( metrics ) < 1 { return nil , Err No Metric } return metrics [ 0 ] , nil }', 'func ( service * Vbox Port Type ) IParallel Portget Slot ( request * IParallel Portget Slot ) ( * IParallel Portget Slot Response , error ) { response : = new ( IParallel Portget Slot Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IEvent Sourceevent Processed ( request * IEvent Sourceevent Processed ) ( * IEvent Sourceevent Processed Response , error ) { response : = new ( IEvent Sourceevent Processed Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IMachine Debuggerset Register ( request * IMachine Debuggerset Register ) ( * IMachine Debuggerset Register Response , error ) { response : = new ( IMachine Debuggerset Register Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IMachineset CPUExecution Cap ( request * IMachineset CPUExecution Cap ) ( * IMachineset CPUExecution Cap Response , error ) { response : = new ( IMachineset CPUExecution Cap Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IHostget Processor Description ( request * IHostget Processor Description ) ( * IHostget Processor Description Response , error ) { response : = new ( IHostget Processor Description Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) INATNetworkset IPv 6Prefix ( request * INATNetworkset IPv 6Prefix ) ( * INATNetworkset IPv 6Prefix Response , error ) { response : = new ( INATNetworkset IPv 6Prefix Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IMachineset IOCache Enabled ( request * IMachineset IOCache Enabled ) ( * IMachineset IOCache Enabled Response , error ) { response : = new ( IMachineset IOCache Enabled Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IDHCPServerget Network Name ( request * IDHCPServerget Network Name ) ( * IDHCPServerget Network Name Response , error ) { response : = new ( IDHCPServerget Network Name Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) INetwork Adapterset Enabled ( request * INetwork Adapterset Enabled ) ( * INetwork Adapterset Enabled Response , error ) { response : = new ( INetwork Adapterset Enabled Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IGuest Sessionget Environment ( request * IGuest Sessionget Environment ) ( * IGuest Sessionget Environment Response , error ) { response : = new ( IGuest Sessionget Environment Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IMachinecreate Shared Folder ( request * IMachinecreate Shared Folder ) ( * IMachinecreate Shared Folder Response , error ) { response : = new ( IMachinecreate Shared Folder Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IUSBDevice Filterget Manufacturer ( request * IUSBDevice Filterget Manufacturer ) ( * IUSBDevice Filterget Manufacturer Response , error ) { response : = new ( IUSBDevice Filterget Manufacturer Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IMachineshow Console Window ( request * IMachineshow Console Window ) ( * IMachineshow Console Window Response , error ) { response : = new ( IMachineshow Console Window Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IMachineget Bandwidth Control ( request * IMachineget Bandwidth Control ) ( * IMachineget Bandwidth Control Response , error ) { response : = new ( IMachineget Bandwidth Control Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IMachineget OSType Id ( request * IMachineget OSType Id ) ( * IMachineget OSType Id Response , error ) { response : = new ( IMachineget OSType Id Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IVRDEServerset Auth Timeout ( request * IVRDEServerset Auth Timeout ) ( * IVRDEServerset Auth Timeout Response , error ) { response : = new ( IVRDEServerset Auth Timeout Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IFileget File Name ( request * IFileget File Name ) ( * IFileget File Name Response , error ) { response : = new ( IFileget File Name Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IMediumcreate Base Storage ( request * IMediumcreate Base Storage ) ( * IMediumcreate Base Storage Response , error ) { response : = new ( IMediumcreate Base Storage Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IProgressget Time Remaining ( request * IProgressget Time Remaining ) ( * IProgressget Time Remaining Response , error ) { response : = new ( IProgressget Time Remaining Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IMachine Debuggerget PAEEnabled ( request * IMachine Debuggerget PAEEnabled ) ( * IMachine Debuggerget PAEEnabled Response , error ) { response : = new ( IMachine Debuggerget PAEEnabled Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IVeto Eventget Vetos ( request * IVeto Eventget Vetos ) ( * IVeto Eventget Vetos Response , error ) { response : = new ( IVeto Eventget Vetos Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IStorage Controllerget Bus ( request * IStorage Controllerget Bus ) ( * IStorage Controllerget Bus Response , error ) { response : = new ( IStorage Controllerget Bus Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) INATNetworkget IPv 6Prefix ( request * INATNetworkget IPv 6Prefix ) ( * INATNetworkget IPv 6Prefix Response , error ) { response : = new ( INATNetworkget IPv 6Prefix Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IProgressget Result Code ( request * IProgressget Result Code ) ( * IProgressget Result Code Response , error ) { response : = new ( IProgressget Result Code Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IProgressset Next Operation ( request * IProgressset Next Operation ) ( * IProgressset Next Operation Response , error ) { response : = new ( IProgressset Next Operation Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IConsoleadopt Saved State ( request * IConsoleadopt Saved State ) ( * IConsoleadopt Saved State Response , error ) { response : = new ( IConsoleadopt Saved State Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IMachineremove Storage Controller ( request * IMachineremove Storage Controller ) ( * IMachineremove Storage Controller Response , error ) { response : = new ( IMachineremove Storage Controller Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IMachineset Autostop Type ( request * IMachineset Autostop Type ) ( * IMachineset Autostop Type Response , error ) { response : = new ( IMachineset Autostop Type Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }', 'func ( service * Vbox Port Type ) IMachineget Autostop Type ( request * IMachineget Autostop Type ) ( * IMachineget Autostop Type Response , error ) { response : = new ( IMachineget Autostop Type Response ) err : = service . client . Call ( " " , request , response ) if err ! = nil { return nil , err } return response , nil }'], 'code_tokens': [['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IEvent', 'Sourceget', 'Event', '(', 'request', '*', 'IEvent', 'Sourceget', 'Event', ')', '(', '*', 'IEvent', 'Sourceget', 'Event', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IEvent', 'Sourceget', 'Event', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IMachineget', 'Settings', 'Modified', '(', 'request', '*', 'IMachineget', 'Settings', 'Modified', ')', '(', '*', 'IMachineget', 'Settings', 'Modified', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IMachineget', 'Settings', 'Modified', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'p', '*', 'Parser', ')', 'Parse', 'Line', '(', 's', 'string', ')', '(', 'telegraf', '.', 'Metric', ',', 'error', ')', '{', 'metrics', ',', 'err', ':', '=', 'p', '.', 'Parse', '(', '[', ']', 'byte', '(', 's', ')', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'if', 'len', '(', 'metrics', ')', '<', '1', '{', 'return', 'nil', ',', 'Err', 'No', 'Metric', '}', 'return', 'metrics', '[', '0', ']', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IParallel', 'Portget', 'Slot', '(', 'request', '*', 'IParallel', 'Portget', 'Slot', ')', '(', '*', 'IParallel', 'Portget', 'Slot', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IParallel', 'Portget', 'Slot', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IEvent', 'Sourceevent', 'Processed', '(', 'request', '*', 'IEvent', 'Sourceevent', 'Processed', ')', '(', '*', 'IEvent', 'Sourceevent', 'Processed', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IEvent', 'Sourceevent', 'Processed', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IMachine', 'Debuggerset', 'Register', '(', 'request', '*', 'IMachine', 'Debuggerset', 'Register', ')', '(', '*', 'IMachine', 'Debuggerset', 'Register', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IMachine', 'Debuggerset', 'Register', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IMachineset', 'CPUExecution', 'Cap', '(', 'request', '*', 'IMachineset', 'CPUExecution', 'Cap', ')', '(', '*', 'IMachineset', 'CPUExecution', 'Cap', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IMachineset', 'CPUExecution', 'Cap', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IHostget', 'Processor', 'Description', '(', 'request', '*', 'IHostget', 'Processor', 'Description', ')', '(', '*', 'IHostget', 'Processor', 'Description', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IHostget', 'Processor', 'Description', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'INATNetworkset', 'IPv', '6Prefix', '(', 'request', '*', 'INATNetworkset', 'IPv', '6Prefix', ')', '(', '*', 'INATNetworkset', 'IPv', '6Prefix', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'INATNetworkset', 'IPv', '6Prefix', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IMachineset', 'IOCache', 'Enabled', '(', 'request', '*', 'IMachineset', 'IOCache', 'Enabled', ')', '(', '*', 'IMachineset', 'IOCache', 'Enabled', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IMachineset', 'IOCache', 'Enabled', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IDHCPServerget', 'Network', 'Name', '(', 'request', '*', 'IDHCPServerget', 'Network', 'Name', ')', '(', '*', 'IDHCPServerget', 'Network', 'Name', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IDHCPServerget', 'Network', 'Name', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'INetwork', 'Adapterset', 'Enabled', '(', 'request', '*', 'INetwork', 'Adapterset', 'Enabled', ')', '(', '*', 'INetwork', 'Adapterset', 'Enabled', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'INetwork', 'Adapterset', 'Enabled', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IGuest', 'Sessionget', 'Environment', '(', 'request', '*', 'IGuest', 'Sessionget', 'Environment', ')', '(', '*', 'IGuest', 'Sessionget', 'Environment', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IGuest', 'Sessionget', 'Environment', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IMachinecreate', 'Shared', 'Folder', '(', 'request', '*', 'IMachinecreate', 'Shared', 'Folder', ')', '(', '*', 'IMachinecreate', 'Shared', 'Folder', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IMachinecreate', 'Shared', 'Folder', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IUSBDevice', 'Filterget', 'Manufacturer', '(', 'request', '*', 'IUSBDevice', 'Filterget', 'Manufacturer', ')', '(', '*', 'IUSBDevice', 'Filterget', 'Manufacturer', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IUSBDevice', 'Filterget', 'Manufacturer', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IMachineshow', 'Console', 'Window', '(', 'request', '*', 'IMachineshow', 'Console', 'Window', ')', '(', '*', 'IMachineshow', 'Console', 'Window', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IMachineshow', 'Console', 'Window', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IMachineget', 'Bandwidth', 'Control', '(', 'request', '*', 'IMachineget', 'Bandwidth', 'Control', ')', '(', '*', 'IMachineget', 'Bandwidth', 'Control', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IMachineget', 'Bandwidth', 'Control', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IMachineget', 'OSType', 'Id', '(', 'request', '*', 'IMachineget', 'OSType', 'Id', ')', '(', '*', 'IMachineget', 'OSType', 'Id', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IMachineget', 'OSType', 'Id', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IVRDEServerset', 'Auth', 'Timeout', '(', 'request', '*', 'IVRDEServerset', 'Auth', 'Timeout', ')', '(', '*', 'IVRDEServerset', 'Auth', 'Timeout', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IVRDEServerset', 'Auth', 'Timeout', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IFileget', 'File', 'Name', '(', 'request', '*', 'IFileget', 'File', 'Name', ')', '(', '*', 'IFileget', 'File', 'Name', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IFileget', 'File', 'Name', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IMediumcreate', 'Base', 'Storage', '(', 'request', '*', 'IMediumcreate', 'Base', 'Storage', ')', '(', '*', 'IMediumcreate', 'Base', 'Storage', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IMediumcreate', 'Base', 'Storage', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IProgressget', 'Time', 'Remaining', '(', 'request', '*', 'IProgressget', 'Time', 'Remaining', ')', '(', '*', 'IProgressget', 'Time', 'Remaining', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IProgressget', 'Time', 'Remaining', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IMachine', 'Debuggerget', 'PAEEnabled', '(', 'request', '*', 'IMachine', 'Debuggerget', 'PAEEnabled', ')', '(', '*', 'IMachine', 'Debuggerget', 'PAEEnabled', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IMachine', 'Debuggerget', 'PAEEnabled', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IVeto', 'Eventget', 'Vetos', '(', 'request', '*', 'IVeto', 'Eventget', 'Vetos', ')', '(', '*', 'IVeto', 'Eventget', 'Vetos', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IVeto', 'Eventget', 'Vetos', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IStorage', 'Controllerget', 'Bus', '(', 'request', '*', 'IStorage', 'Controllerget', 'Bus', ')', '(', '*', 'IStorage', 'Controllerget', 'Bus', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IStorage', 'Controllerget', 'Bus', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'INATNetworkget', 'IPv', '6Prefix', '(', 'request', '*', 'INATNetworkget', 'IPv', '6Prefix', ')', '(', '*', 'INATNetworkget', 'IPv', '6Prefix', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'INATNetworkget', 'IPv', '6Prefix', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IProgressget', 'Result', 'Code', '(', 'request', '*', 'IProgressget', 'Result', 'Code', ')', '(', '*', 'IProgressget', 'Result', 'Code', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IProgressget', 'Result', 'Code', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IProgressset', 'Next', 'Operation', '(', 'request', '*', 'IProgressset', 'Next', 'Operation', ')', '(', '*', 'IProgressset', 'Next', 'Operation', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IProgressset', 'Next', 'Operation', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IConsoleadopt', 'Saved', 'State', '(', 'request', '*', 'IConsoleadopt', 'Saved', 'State', ')', '(', '*', 'IConsoleadopt', 'Saved', 'State', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IConsoleadopt', 'Saved', 'State', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IMachineremove', 'Storage', 'Controller', '(', 'request', '*', 'IMachineremove', 'Storage', 'Controller', ')', '(', '*', 'IMachineremove', 'Storage', 'Controller', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IMachineremove', 'Storage', 'Controller', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IMachineset', 'Autostop', 'Type', '(', 'request', '*', 'IMachineset', 'Autostop', 'Type', ')', '(', '*', 'IMachineset', 'Autostop', 'Type', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IMachineset', 'Autostop', 'Type', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}'], ['func', '(', 'service', '*', 'Vbox', 'Port', 'Type', ')', 'IMachineget', 'Autostop', 'Type', '(', 'request', '*', 'IMachineget', 'Autostop', 'Type', ')', '(', '*', 'IMachineget', 'Autostop', 'Type', 'Response', ',', 'error', ')', '{', 'response', ':', '=', 'new', '(', 'IMachineget', 'Autostop', 'Type', 'Response', ')', 'err', ':', '=', 'service', '.', 'client', '.', 'Call', '(', '"', '"', ',', 'request', ',', 'response', ')', 'if', 'err', '!', '=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'response', ',', 'nil', '}']], 'summ_text': ['error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'parse line converts a single line of text in logfmt format to metrics', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault', 'error can be either of the following types invalid object fault runtime fault'], 'summ_tokens': [['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'parse', 'line', 'converts', 'a', 'single', 'line', 'of', 'text', 'in', 'logfmt', 'format', 'to', 'metrics', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>'], ['<s>', 'error', 'can', 'be', 'either', 'of', 'the', 'following', 'types', 'invalid', 'object', 'fault', 'runtime', 'fault', '</s>']], 'src_vocab': [<c2nl.inputters.vocabulary.Vocabulary object at 0x7f13583895e0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838c7c0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838cfd0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838c3a0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838c9a0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838cca0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838c1c0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838c370>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838c670>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838c970>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838c580>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838ca30>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838c850>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838cc10>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838cdf0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f135838c910>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f13584686d0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358468eb0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358468400>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358468580>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358468f70>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358468250>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358305310>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358305490>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358305610>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358305790>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358305910>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358305a90>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358305c10>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358305d90>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358305160>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f1358305e50>], 'src_map': [tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9,  3, 10, 11,  7,  3, 12, 13, 14, 15, 16,
         7, 17, 18, 15, 19, 20, 21,  4, 13,  8,  3, 22, 23, 24,  3, 10,  7,  7,
        25, 19, 26, 21, 27, 17, 28, 27, 15, 19, 29, 25, 30,  3, 18,  7, 31, 32,
        17, 28, 27, 15, 33, 34, 14, 29, 28, 18, 22, 35, 23, 15, 27, 29]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  3, 13,  5, 10, 11, 12,  9,
         3,  5, 10, 11, 12, 14, 15, 16,  9, 17, 18, 19, 20, 21,  3, 10, 11, 12,
        14,  9, 22, 19, 20,  4, 23, 24, 23, 25,  3, 26, 26, 15, 13, 15, 18,  9,
        27, 22, 28, 20, 29, 17, 30, 29, 15, 22, 31, 30, 18, 15, 29, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  8,  3, 12,  5, 10, 11,  8,  9,
         3,  5, 10, 11,  8, 13, 14, 15,  9, 16, 17, 18, 19, 20,  3, 10, 11,  8,
        13,  9, 21, 18, 19,  4, 22, 23, 22, 24,  3, 25, 25, 14, 12, 14, 17,  9,
        26, 21, 27, 19, 28, 16, 29, 28, 14, 21, 30, 29, 17, 14, 28, 30]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  8,  3, 12,  5, 10, 11,  8,  9,
         3,  5, 10, 11,  8, 13, 14, 15,  9, 16, 17, 18, 19, 20,  3, 10, 11,  8,
        13,  9, 21, 18, 19,  4, 22, 23, 22, 24,  3, 25, 25, 14, 12, 14, 17,  9,
        26, 21, 27, 19, 28, 16, 29, 28, 14, 21, 30, 29, 17, 14, 28, 30])], 'alignment': [tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 18,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 16,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 15,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1, 15,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1])], 'stype': [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]}
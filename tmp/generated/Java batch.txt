JAVA

{'ids': [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], 'language': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'batch_size': 32, 'code_word_rep': tensor([[26506, 16385, 20594,  ..., 29070, 20843, 27371],
        [26506, 16385, 20594,  ..., 29070, 20843, 27371],
        [26506, 16385, 20594,  ..., 29070, 20843, 27371],
        ...,
        [ 4008, 13923, 11918,  ..., 19906, 20843, 27371],
        [16385, 20594, 33740,  ..., 19906, 20843, 27371],
        [ 4008, 22070, 14870,  ...,  2560, 20843, 27371]]), 'code_char_rep': None, 'code_type_rep': None, 'code_mask_rep': None, 'code_len': tensor([71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
        71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71]), 'summ_word_rep': tensor([[    2, 24742, 25765, 15665, 27547, 27743, 16261, 19170, 27120, 27746,
         19170, 24429, 21320,   167, 14918,  5420,  7330,     3],
        [    2, 24742, 25765, 15665, 27547, 27743, 16261, 19170, 27120, 27746,
         19170, 24429, 21320,   167, 14918,  5420,  7330,     3],
        [    2, 24742, 25765, 15665, 27547, 27743, 16261, 19170, 27120, 27746,
         19170, 24429, 21320,   167, 14918,  5420,  7330,     3],
        [    2, 11156, 19170, 12150,  2993, 11537, 18321, 20168, 23120, 17620,
         15524, 16937, 11614, 17065, 24619, 17211,  7330,     3],
        [    2, 24742, 25765, 15665, 27547, 27743, 16261, 19170, 27120, 27746,
         19170, 24429, 21320,   167, 14918,  5420,  7330,     3],
        [    2, 24742, 25765, 15665, 27547, 27743, 16261, 19170, 27120, 27746,
         19170, 24429, 21320,   167, 14918,  5420,  7330,     3],
        [    2,  6225,  5192,  1869, 11850,  5857, 12077, 20087,  6360,  6816,
         17620, 22303,  1869, 11850,  5857, 11815,  8844,     3],
        [    2, 17892,  9068,  2993, 25116, 15665,  9068, 19973, 25457,  5187,
         25274, 16049, 16536, 23357, 19170, 24429,  2993,     3],
        [    2, 17892,  9068,  2993, 25116, 15665,  9068, 19973, 25457,  5187,
         25274, 16049, 16536, 23357, 19170, 24429,  2993,     3],
        [    2,  6008, 15665,  8501, 26483, 22487,  9926, 16261, 19170, 26601,
          7330, 21820, 27690,  5187, 16536,  7330,     3,     0],
        [    2, 11356, 26174, 19170, 24794,  5542, 21290,  1830, 23555, 11880,
         12987, 12626, 27746, 19170, 20365,  7330,     3,     0],
        [    2,  6008, 15665,  8501, 26483, 22487,  9926, 16261, 19170, 26601,
          7330, 21820, 27690,  5187, 16536,  7330,     3,     0],
        [    2,  5899, 19170, 11614, 18177, 21680,  5017, 11614, 24821, 22237,
          8501, 19170, 24429, 24291, 11880,  7743,     3,     0],
        [    2, 25038,  9068,  5555, 10735, 16261, 19170, 12903,   167, 19170,
         24580, 27746,  9068, 26287, 13020,  7330,     3,     0],
        [    2, 19965, 19170, 23816,   167,  9068, 11123, 23120,  4036,  6448,
          9068,  5899,   167, 16049, 15066,  7330,     3,     0],
        [    2,  5899, 19170, 11614, 18177, 21680,  5017, 11614, 24821, 22237,
          8501, 19170, 24429, 24291, 11880,  7743,     3,     0],
        [    2, 24742, 25116, 19170,  5781,  3067, 13681, 19170,  5365, 18177,
         21680,  5017,  5365,  5899,  8501,  7805,     3,     0],
        [    2, 13924, 19170, 14457, 25749, 27746,  1426,  6185,  8501,  6360,
          6816, 27746,  3523,   869, 27292,  7330,     3,     0],
        [    2,  5955, 27791,  9743,  9835,  9486, 23400, 15096, 22421, 19170,
         22025, 10777,   167,  7463,  9743,   639,     3,     0],
        [    2, 17892,  9068, 10289, 12703, 22570, 27746, 19170, 24429, 12703,
         19391, 19910, 25274, 24615, 20919,  7330,     3,     0],
        [    2, 17892,  9068,  2470,  5899,   167, 17551, 27746, 19170, 24429,
          9466, 21723, 11880, 20354,   207,  7330,     3,     0],
        [    2,   305, 19170,  7576, 15400, 25116,  9675,  1939, 23120, 13794,
         23344, 17620, 12263, 18468, 12854,  7330,     3,     0],
        [    2,  9130,  8596, 17620, 19170,  6666, 13020, 13604, 19170,  3139,
         13794,  3139, 21680,  2702,  5324,  7330,     3,     0],
        [    2,  4322,  9068, 26239,   167, 24115, 13020, 25684, 13794,   706,
         24615, 26239,   167,  3186, 18046,  7330,     3,     0],
        [    2,  1517,  8501,  2384, 19170,  5462,  2702, 26306, 25116,  5462,
         18815,  7360,  6360, 21033,  7330,     3,     0,     0],
        [    2, 23716, 19170, 16548,  3338, 13268,  8397,  8501,  6360, 22118,
         25421, 19170, 21100,   249,  7330,     3,     0,     0],
        [    2,  4322,   706, 26877,  2085, 25116, 15665, 19170, 19600,   167,
         19170, 24429, 24221,  2085,  7330,     3,     0,     0],
        [    2, 23356,  8195, 17620,  9068, 11954, 12984,  5187,  6164, 13794,
         12332, 16536, 15665, 16437,  7330,     3,     0,     0],
        [    2,  6225,  5192, 13090, 11850, 12077, 20087,  6360,  6816, 17620,
         22303, 13090, 11850, 11815,  8844,     3,     0,     0],
        [    2, 11100,  5187,  9068, 22264, 16536,   167, 19170, 24429, 16150,
          8501,  9068,  9835, 26601,  7330,     3,     0,     0],
        [    2,  6008, 18439, 19170, 19600, 13745,   167, 22293, 25274,  8506,
         17156,  4847, 13794, 18803,  7330,     3,     0,     0],
        [    2, 14903, 19170,  4942, 16266, 12312, 22695,  6008, 26408, 14953,
         11880, 19170, 17029, 25997,  7330,     3,     0,     0]]), 'summ_char_rep': None, 'summ_len': tensor([18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17,
        17, 17, 17, 17, 17, 17, 16, 16, 16, 16, 16, 16, 16, 16]), 'tgt_seq': tensor([[    2, 24742, 25765, 15665, 27547, 27743, 16261, 19170, 27120, 27746,
         19170, 24429, 21320,   167, 14918,  5420,  7330,     3],
        [    2, 24742, 25765, 15665, 27547, 27743, 16261, 19170, 27120, 27746,
         19170, 24429, 21320,   167, 14918,  5420,  7330,     3],
        [    2, 24742, 25765, 15665, 27547, 27743, 16261, 19170, 27120, 27746,
         19170, 24429, 21320,   167, 14918,  5420,  7330,     3],
        [    2, 11156, 19170, 12150,  2993, 11537, 18321, 20168, 23120, 17620,
         15524, 16937, 11614, 17065, 24619, 17211,  7330,     3],
        [    2, 24742, 25765, 15665, 27547, 27743, 16261, 19170, 27120, 27746,
         19170, 24429, 21320,   167, 14918,  5420,  7330,     3],
        [    2, 24742, 25765, 15665, 27547, 27743, 16261, 19170, 27120, 27746,
         19170, 24429, 21320,   167, 14918,  5420,  7330,     3],
        [    2,  6225,  5192,  1869, 11850,  5857, 12077, 20087,  6360,  6816,
         17620, 22303,  1869, 11850,  5857, 11815,  8844,     3],
        [    2, 17892,  9068,  2993, 25116, 15665,  9068, 19973, 25457,  5187,
         25274, 16049, 16536, 23357, 19170, 24429,  2993,     3],
        [    2, 17892,  9068,  2993, 25116, 15665,  9068, 19973, 25457,  5187,
         25274, 16049, 16536, 23357, 19170, 24429,  2993,     3],
        [    2,  6008, 15665,  8501, 26483, 22487,  9926, 16261, 19170, 26601,
          7330, 21820, 27690,  5187, 16536,  7330,     3,     0],
        [    2, 11356, 26174, 19170, 24794,  5542, 21290,  1830, 23555, 11880,
         12987, 12626, 27746, 19170, 20365,  7330,     3,     0],
        [    2,  6008, 15665,  8501, 26483, 22487,  9926, 16261, 19170, 26601,
          7330, 21820, 27690,  5187, 16536,  7330,     3,     0],
        [    2,  5899, 19170, 11614, 18177, 21680,  5017, 11614, 24821, 22237,
          8501, 19170, 24429, 24291, 11880,  7743,     3,     0],
        [    2, 25038,  9068,  5555, 10735, 16261, 19170, 12903,   167, 19170,
         24580, 27746,  9068, 26287, 13020,  7330,     3,     0],
        [    2, 19965, 19170, 23816,   167,  9068, 11123, 23120,  4036,  6448,
          9068,  5899,   167, 16049, 15066,  7330,     3,     0],
        [    2,  5899, 19170, 11614, 18177, 21680,  5017, 11614, 24821, 22237,
          8501, 19170, 24429, 24291, 11880,  7743,     3,     0],
        [    2, 24742, 25116, 19170,  5781,  3067, 13681, 19170,  5365, 18177,
         21680,  5017,  5365,  5899,  8501,  7805,     3,     0],
        [    2, 13924, 19170, 14457, 25749, 27746,  1426,  6185,  8501,  6360,
          6816, 27746,  3523,   869, 27292,  7330,     3,     0],
        [    2,  5955, 27791,  9743,  9835,  9486, 23400, 15096, 22421, 19170,
         22025, 10777,   167,  7463,  9743,   639,     3,     0],
        [    2, 17892,  9068, 10289, 12703, 22570, 27746, 19170, 24429, 12703,
         19391, 19910, 25274, 24615, 20919,  7330,     3,     0],
        [    2, 17892,  9068,  2470,  5899,   167, 17551, 27746, 19170, 24429,
          9466, 21723, 11880, 20354,   207,  7330,     3,     0],
        [    2,   305, 19170,  7576, 15400, 25116,  9675,  1939, 23120, 13794,
         23344, 17620, 12263, 18468, 12854,  7330,     3,     0],
        [    2,  9130,  8596, 17620, 19170,  6666, 13020, 13604, 19170,  3139,
         13794,  3139, 21680,  2702,  5324,  7330,     3,     0],
        [    2,  4322,  9068, 26239,   167, 24115, 13020, 25684, 13794,   706,
         24615, 26239,   167,  3186, 18046,  7330,     3,     0],
        [    2,  1517,  8501,  2384, 19170,  5462,  2702, 26306, 25116,  5462,
         18815,  7360,  6360, 21033,  7330,     3,     0,     0],
        [    2, 23716, 19170, 16548,  3338, 13268,  8397,  8501,  6360, 22118,
         25421, 19170, 21100,   249,  7330,     3,     0,     0],
        [    2,  4322,   706, 26877,  2085, 25116, 15665, 19170, 19600,   167,
         19170, 24429, 24221,  2085,  7330,     3,     0,     0],
        [    2, 23356,  8195, 17620,  9068, 11954, 12984,  5187,  6164, 13794,
         12332, 16536, 15665, 16437,  7330,     3,     0,     0],
        [    2,  6225,  5192, 13090, 11850, 12077, 20087,  6360,  6816, 17620,
         22303, 13090, 11850, 11815,  8844,     3,     0,     0],
        [    2, 11100,  5187,  9068, 22264, 16536,   167, 19170, 24429, 16150,
          8501,  9068,  9835, 26601,  7330,     3,     0,     0],
        [    2,  6008, 18439, 19170, 19600, 13745,   167, 22293, 25274,  8506,
         17156,  4847, 13794, 18803,  7330,     3,     0,     0],
        [    2, 14903, 19170,  4942, 16266, 12312, 22695,  6008, 26408, 14953,
         11880, 19170, 17029, 25997,  7330,     3,     0,     0]]), 'code_text': ['private void expand ( int i ) { if ( count + i <= buf . length ) { return ; } byte [ ] newbuf = m Pool . get Buf ( ( count + i ) * NUM ) ; System . arraycopy ( buf , NUM , newbuf , NUM , count ) ; m Pool . return Buf ( buf ) ; buf = newbuf ; }', 'private void expand ( int i ) { if ( count + i <= buf . length ) { return ; } byte [ ] newbuf = m Pool . get Buf ( ( count + i ) * NUM ) ; System . arraycopy ( buf , NUM , newbuf , NUM , count ) ; m Pool . return Buf ( buf ) ; buf = newbuf ; }', 'private void expand ( int i ) { if ( count + i <= buf . length ) { return ; } byte [ ] newbuf = m Pool . get Buf ( ( count + i ) * NUM ) ; System . arraycopy ( buf , NUM , newbuf , NUM , count ) ; m Pool . return Buf ( buf ) ; buf = newbuf ; }', 'private static String convert To Quoted String ( String s ) { if ( s == null || s . is Empty ( ) ) { return null ; } if ( s . char At ( NUM ) == STRING && s . char At ( s . length ( ) - NUM ) == STRING ) { return s ; } return STRING + s + STRING ; }', 'private void expand ( int i ) { if ( count + i <= buf . length ) { return ; } byte [ ] newbuf = m Pool . get Buf ( ( count + i ) * NUM ) ; System . arraycopy ( buf , NUM , newbuf , NUM , count ) ; m Pool . return Buf ( buf ) ; buf = newbuf ; }', 'private void expand ( int i ) { if ( count + i <= buf . length ) { return ; } byte [ ] newbuf = m Pool . get Buf ( ( count + i ) * NUM ) ; System . arraycopy ( buf , NUM , newbuf , NUM , count ) ; m Pool . return Buf ( buf ) ; buf = newbuf ; }', 'private static File create Reserve Disk Cache Dir ( Context context ) { File cache Dir = Storage Utils . get Cache Directory ( context , BOOL ) ; File individual Dir = new File ( cache Dir , STRING ) ; if ( individual Dir . exists ( ) || individual Dir . mkdir ( ) ) { cache Dir = individual Dir ; } return cache Dir ; }', 'public static String random String ( String sampler , int length ) { String Builder builder = new String Builder ( length ) ; for ( int i = NUM ; i < length ; i ++ ) builder . append ( sampler . char At ( SEEDED RANDOM . next Int ( sampler . length ( ) ) ) ) ; return builder . to String ( ) ; }', 'public static String random String ( String sampler , int length ) { String Builder builder = new String Builder ( length ) ; for ( int i = NUM ; i < length ; i ++ ) builder . append ( sampler . char At ( SEEDED RANDOM . next Int ( sampler . length ( ) ) ) ) ; return builder . to String ( ) ; }', 'public int alloc ( int size ) { int index = n ; int len = array . length ; if ( n + size >= len ) { byte [ ] aux = new byte [ len + block Size ] ; System . arraycopy ( array , NUM , aux , NUM , len ) ; array = aux ; } n += size ; return index ; }', 'boolean validate ( final Color color , final Composite blend ) { if ( ! validated ) { if ( ! tilesets . is Empty ( ) ) { for ( Tile Set Definition def : tilesets ) { add ( def , color , blend ) ; } tilesets . clear ( ) ; validated = BOOL ; return BOOL ; } return BOOL ; } return BOOL ; }', 'public int alloc ( int size ) { int index = n ; int len = array . length ; if ( n + size >= len ) { char [ ] aux = new char [ len + block Size ] ; System . arraycopy ( array , NUM , aux , NUM , len ) ; array = aux ; } n += size ; return index ; }', 'public Http Request content Type ( final String content Type , final String charset ) { if ( charset != null && charset . length ( ) > NUM ) { final String separator = STRING + PARAM CHARSET + STRING ; return header ( HEADER CONTENT TYPE , content Type + separator + charset ) ; } else return header ( HEADER CONTENT TYPE , content Type ) ; }', 'public void add Datatransfer Progress Listener ( On Datatransfer Progress Listener listener , Account account , OC File file ) { if ( account == null || file == null || listener == null ) return ; String target Key = build Remote Name ( account . name , file . get Remote Path ( ) ) ; m Bound Listeners . put ( target Key , listener ) ; }', 'public String translate ( String key , Map < String , String > replacements ) { String str = translate ( key ) ; for ( Map . Entry < String , String > replacement : replacements . entry Set ( ) ) { str = str . replace All ( replacement . get Key ( ) , replacement . get Value ( ) ) ; } return str ; }', 'public Http Request content Type ( final String content Type , final String charset ) { if ( charset != null && charset . length ( ) > NUM ) { final String separator = STRING + PARAM CHARSET + STRING ; return header ( HEADER CONTENT TYPE , content Type + separator + charset ) ; } else return header ( HEADER CONTENT TYPE , content Type ) ; }', 'private Response require JSON ( IHTTP Session session ) { final Map < String , String > headers = session . get Headers ( ) ; if ( ! APPLICATION JSON . equals ( headers . get ( CONTENT TYPE ) ) ) { return new Fixed Length Response ( Response . Status . NOT ACCEPTABLE , MIME PLAINTEXT , STRING ) ; } else { return null ; } }', 'void register Local Symbol ( String source File , String full Local Name , String required Namespace , String local Name ) { value Rewrite . put ( source File , full Local Name , local Name ) ; type Rewrite . put ( source File , full Local Name , local Name ) ; type Rewrite . put ( source File , required Namespace , local Name ) ; }', 'public static boolean equal Over Shorter Of Both ( byte [ ] a , byte [ ] b ) { int top = Math . min ( a . length , b . length ) ; for ( int i = NUM ; i < top ; i ++ ) { if ( a [ i ] != b [ i ] ) return BOOL ; } return BOOL ; }', 'public static Lazy Query Container create Lazy Query Container ( final Bean Query Factory < ? extends Abstract Bean Query < ? > > query Factory ) { query Factory . set Query Configuration ( Collections . empty Map ( ) ) ; return new Lazy Query Container ( new Lazy Query Definition ( BOOL , NUM , SPUI Label Definitions . VAR NAME ) , query Factory ) ; }', 'public static Refresh Token Credentials create ( Oauth Client oauth Config , String refresh Token Secret , String token Exchange Url ) { Refresh Request Factory request Factory = new Refresh Request Factory ( ) ; Clock clock = Clock . system Default Zone ( ) ; return new Refresh Token Credentials ( request Factory , refresh Token Secret , token Exchange Url , oauth Config , clock ) ; }', 'public static Fields find By Thrift Id ( int field Id ) { switch ( field Id ) { case NUM : return TRACE ID ; case NUM : return NAME ; case NUM : return ID ; case NUM : return PARENT ID ; case NUM : return ANNOTATIONS ; case NUM : return BINARY ANNOTATIONS ; case NUM : return DEBUG ; default : return null ; } }', 'public boolean has Android Plugin ( ) { List < String > plugins = get Plugins ( ) ; return plugins . contains ( Gradle Detector . APP PLUGIN ID ) || plugins . contains ( Gradle Detector . OLD APP PLUGIN ID ) || plugins . contains ( Gradle Detector . LIB PLUGIN ID ) || plugins . contains ( Gradle Detector . OLD LIB PLUGIN ID ) ; }', 'private List < File Path > list Seqno Files ( ) { Linked List < File Path > children = new Linked List < File Path > ( ) ; for ( String file Name : list Seqno File Names ( ) ) { File Path fp = new File Path ( service Dir , file Name ) ; children . add ( fp ) ; } return children ; }', 'public static boolean load Native Library ( ) { try { Log . i ( TAG , STRING + LIBRARY NAME ) ; System . load Library ( STRING ) ; System . load Library ( LIBRARY NAME ) ; } catch ( Exception e ) { Log . e ( TAG , STRING + e . to String ( ) ) ; return BOOL ; } return BOOL ; }', 'public Metadata Editor Compat put Bitmap ( int key , Bitmap bitmap ) { if ( s Has Remote Control AP Is ) { try { m Put Bitmap Method . invoke ( m Actual Metadata Editor , key , bitmap ) ; } catch ( Exception e ) { throw new Runtime Exception ( e . get Message ( ) , e ) ; } } return this ; }', 'private static Buffered Image expand Gray Thumb ( Buffered Image thumb ) { Buffered Image ret = new Buffered Image ( thumb . get Width ( ) , thumb . get Height ( ) , Buffered Image . TYPE INT RGB ) ; Graphics g = ret . get Graphics ( ) ; g . draw Image ( thumb , NUM , NUM , null ) ; return ret ; }', 'private boolean is Synthetic ( Field Or Method member ) { if ( BCEL Util . is Synthetic ( member ) ) { return BOOL ; } String name = member . get Name ( ) ; if ( name . starts With ( STRING ) ) { return BOOL ; } if ( name . starts With ( STRING ) ) { return BOOL ; } return BOOL ; }', 'public static Disc Cache Aware create Reserve Disc Cache ( File cache Dir ) { File individual Dir = new File ( cache Dir , STRING ) ; if ( individual Dir . exists ( ) || individual Dir . mkdir ( ) ) { cache Dir = individual Dir ; } return new Total Size Limited Disc Cache ( cache Dir , NUM * NUM * NUM ) ; }', 'public static byte [ ] to Byte Array ( Input Stream input Stream , final int size ) throws IO Exception { Byte Array Output Stream out = new Byte Array Output Stream ( ) ; long length = size == - NUM ? Long . MAX VALUE : size ; pipe ( input Stream , out , length ) ; return out . to Byte Array ( ) ; }', 'void expand Capacity ( int minimum Capacity ) { int new Capacity = ( value . length + NUM ) * NUM ; if ( new Capacity < NUM ) { new Capacity = Integer . MAX VALUE ; } else if ( minimum Capacity > new Capacity ) { new Capacity = minimum Capacity ; } value = Arrays . copy Of ( value , new Capacity ) ; }', 'public double distance To ( Geo Location location , double radius ) { return Math . acos ( Math . sin ( rad Lat ) * Math . sin ( location . rad Lat ) + Math . cos ( rad Lat ) * Math . cos ( location . rad Lat ) * Math . cos ( rad Lon - location . rad Lon ) ) * radius ; }'], 'code_tokens': [['private', 'void', 'expand', '(', 'int', 'i', ')', '{', 'if', '(', 'count', '+', 'i', '<=', 'buf', '.', 'length', ')', '{', 'return', ';', '}', 'byte', '[', ']', 'newbuf', '=', 'm', 'Pool', '.', 'get', 'Buf', '(', '(', 'count', '+', 'i', ')', '*', 'NUM', ')', ';', 'System', '.', 'arraycopy', '(', 'buf', ',', 'NUM', ',', 'newbuf', ',', 'NUM', ',', 'count', ')', ';', 'm', 'Pool', '.', 'return', 'Buf', '(', 'buf', ')', ';', 'buf', '=', 'newbuf', ';', '}'], ['private', 'void', 'expand', '(', 'int', 'i', ')', '{', 'if', '(', 'count', '+', 'i', '<=', 'buf', '.', 'length', ')', '{', 'return', ';', '}', 'byte', '[', ']', 'newbuf', '=', 'm', 'Pool', '.', 'get', 'Buf', '(', '(', 'count', '+', 'i', ')', '*', 'NUM', ')', ';', 'System', '.', 'arraycopy', '(', 'buf', ',', 'NUM', ',', 'newbuf', ',', 'NUM', ',', 'count', ')', ';', 'm', 'Pool', '.', 'return', 'Buf', '(', 'buf', ')', ';', 'buf', '=', 'newbuf', ';', '}'], ['private', 'void', 'expand', '(', 'int', 'i', ')', '{', 'if', '(', 'count', '+', 'i', '<=', 'buf', '.', 'length', ')', '{', 'return', ';', '}', 'byte', '[', ']', 'newbuf', '=', 'm', 'Pool', '.', 'get', 'Buf', '(', '(', 'count', '+', 'i', ')', '*', 'NUM', ')', ';', 'System', '.', 'arraycopy', '(', 'buf', ',', 'NUM', ',', 'newbuf', ',', 'NUM', ',', 'count', ')', ';', 'm', 'Pool', '.', 'return', 'Buf', '(', 'buf', ')', ';', 'buf', '=', 'newbuf', ';', '}'], ['private', 'static', 'String', 'convert', 'To', 'Quoted', 'String', '(', 'String', 's', ')', '{', 'if', '(', 's', '==', 'null', '||', 's', '.', 'is', 'Empty', '(', ')', ')', '{', 'return', 'null', ';', '}', 'if', '(', 's', '.', 'char', 'At', '(', 'NUM', ')', '==', 'STRING', '&&', 's', '.', 'char', 'At', '(', 's', '.', 'length', '(', ')', '-', 'NUM', ')', '==', 'STRING', ')', '{', 'return', 's', ';', '}', 'return', 'STRING', '+', 's', '+', 'STRING', ';', '}'], ['private', 'void', 'expand', '(', 'int', 'i', ')', '{', 'if', '(', 'count', '+', 'i', '<=', 'buf', '.', 'length', ')', '{', 'return', ';', '}', 'byte', '[', ']', 'newbuf', '=', 'm', 'Pool', '.', 'get', 'Buf', '(', '(', 'count', '+', 'i', ')', '*', 'NUM', ')', ';', 'System', '.', 'arraycopy', '(', 'buf', ',', 'NUM', ',', 'newbuf', ',', 'NUM', ',', 'count', ')', ';', 'm', 'Pool', '.', 'return', 'Buf', '(', 'buf', ')', ';', 'buf', '=', 'newbuf', ';', '}'], ['private', 'void', 'expand', '(', 'int', 'i', ')', '{', 'if', '(', 'count', '+', 'i', '<=', 'buf', '.', 'length', ')', '{', 'return', ';', '}', 'byte', '[', ']', 'newbuf', '=', 'm', 'Pool', '.', 'get', 'Buf', '(', '(', 'count', '+', 'i', ')', '*', 'NUM', ')', ';', 'System', '.', 'arraycopy', '(', 'buf', ',', 'NUM', ',', 'newbuf', ',', 'NUM', ',', 'count', ')', ';', 'm', 'Pool', '.', 'return', 'Buf', '(', 'buf', ')', ';', 'buf', '=', 'newbuf', ';', '}'], ['private', 'static', 'File', 'create', 'Reserve', 'Disk', 'Cache', 'Dir', '(', 'Context', 'context', ')', '{', 'File', 'cache', 'Dir', '=', 'Storage', 'Utils', '.', 'get', 'Cache', 'Directory', '(', 'context', ',', 'BOOL', ')', ';', 'File', 'individual', 'Dir', '=', 'new', 'File', '(', 'cache', 'Dir', ',', 'STRING', ')', ';', 'if', '(', 'individual', 'Dir', '.', 'exists', '(', ')', '||', 'individual', 'Dir', '.', 'mkdir', '(', ')', ')', '{', 'cache', 'Dir', '=', 'individual', 'Dir', ';', '}', 'return', 'cache', 'Dir', ';', '}'], ['public', 'static', 'String', 'random', 'String', '(', 'String', 'sampler', ',', 'int', 'length', ')', '{', 'String', 'Builder', 'builder', '=', 'new', 'String', 'Builder', '(', 'length', ')', ';', 'for', '(', 'int', 'i', '=', 'NUM', ';', 'i', '<', 'length', ';', 'i', '++', ')', 'builder', '.', 'append', '(', 'sampler', '.', 'char', 'At', '(', 'SEEDED', 'RANDOM', '.', 'next', 'Int', '(', 'sampler', '.', 'length', '(', ')', ')', ')', ')', ';', 'return', 'builder', '.', 'to', 'String', '(', ')', ';', '}'], ['public', 'static', 'String', 'random', 'String', '(', 'String', 'sampler', ',', 'int', 'length', ')', '{', 'String', 'Builder', 'builder', '=', 'new', 'String', 'Builder', '(', 'length', ')', ';', 'for', '(', 'int', 'i', '=', 'NUM', ';', 'i', '<', 'length', ';', 'i', '++', ')', 'builder', '.', 'append', '(', 'sampler', '.', 'char', 'At', '(', 'SEEDED', 'RANDOM', '.', 'next', 'Int', '(', 'sampler', '.', 'length', '(', ')', ')', ')', ')', ';', 'return', 'builder', '.', 'to', 'String', '(', ')', ';', '}'], ['public', 'int', 'alloc', '(', 'int', 'size', ')', '{', 'int', 'index', '=', 'n', ';', 'int', 'len', '=', 'array', '.', 'length', ';', 'if', '(', 'n', '+', 'size', '>=', 'len', ')', '{', 'byte', '[', ']', 'aux', '=', 'new', 'byte', '[', 'len', '+', 'block', 'Size', ']', ';', 'System', '.', 'arraycopy', '(', 'array', ',', 'NUM', ',', 'aux', ',', 'NUM', ',', 'len', ')', ';', 'array', '=', 'aux', ';', '}', 'n', '+=', 'size', ';', 'return', 'index', ';', '}'], ['boolean', 'validate', '(', 'final', 'Color', 'color', ',', 'final', 'Composite', 'blend', ')', '{', 'if', '(', '!', 'validated', ')', '{', 'if', '(', '!', 'tilesets', '.', 'is', 'Empty', '(', ')', ')', '{', 'for', '(', 'Tile', 'Set', 'Definition', 'def', ':', 'tilesets', ')', '{', 'add', '(', 'def', ',', 'color', ',', 'blend', ')', ';', '}', 'tilesets', '.', 'clear', '(', ')', ';', 'validated', '=', 'BOOL', ';', 'return', 'BOOL', ';', '}', 'return', 'BOOL', ';', '}', 'return', 'BOOL', ';', '}'], ['public', 'int', 'alloc', '(', 'int', 'size', ')', '{', 'int', 'index', '=', 'n', ';', 'int', 'len', '=', 'array', '.', 'length', ';', 'if', '(', 'n', '+', 'size', '>=', 'len', ')', '{', 'char', '[', ']', 'aux', '=', 'new', 'char', '[', 'len', '+', 'block', 'Size', ']', ';', 'System', '.', 'arraycopy', '(', 'array', ',', 'NUM', ',', 'aux', ',', 'NUM', ',', 'len', ')', ';', 'array', '=', 'aux', ';', '}', 'n', '+=', 'size', ';', 'return', 'index', ';', '}'], ['public', 'Http', 'Request', 'content', 'Type', '(', 'final', 'String', 'content', 'Type', ',', 'final', 'String', 'charset', ')', '{', 'if', '(', 'charset', '!=', 'null', '&&', 'charset', '.', 'length', '(', ')', '>', 'NUM', ')', '{', 'final', 'String', 'separator', '=', 'STRING', '+', 'PARAM', 'CHARSET', '+', 'STRING', ';', 'return', 'header', '(', 'HEADER', 'CONTENT', 'TYPE', ',', 'content', 'Type', '+', 'separator', '+', 'charset', ')', ';', '}', 'else', 'return', 'header', '(', 'HEADER', 'CONTENT', 'TYPE', ',', 'content', 'Type', ')', ';', '}'], ['public', 'void', 'add', 'Datatransfer', 'Progress', 'Listener', '(', 'On', 'Datatransfer', 'Progress', 'Listener', 'listener', ',', 'Account', 'account', ',', 'OC', 'File', 'file', ')', '{', 'if', '(', 'account', '==', 'null', '||', 'file', '==', 'null', '||', 'listener', '==', 'null', ')', 'return', ';', 'String', 'target', 'Key', '=', 'build', 'Remote', 'Name', '(', 'account', '.', 'name', ',', 'file', '.', 'get', 'Remote', 'Path', '(', ')', ')', ';', 'm', 'Bound', 'Listeners', '.', 'put', '(', 'target', 'Key', ',', 'listener', ')', ';', '}'], ['public', 'String', 'translate', '(', 'String', 'key', ',', 'Map', '<', 'String', ',', 'String', '>', 'replacements', ')', '{', 'String', 'str', '=', 'translate', '(', 'key', ')', ';', 'for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'String', '>', 'replacement', ':', 'replacements', '.', 'entry', 'Set', '(', ')', ')', '{', 'str', '=', 'str', '.', 'replace', 'All', '(', 'replacement', '.', 'get', 'Key', '(', ')', ',', 'replacement', '.', 'get', 'Value', '(', ')', ')', ';', '}', 'return', 'str', ';', '}'], ['public', 'Http', 'Request', 'content', 'Type', '(', 'final', 'String', 'content', 'Type', ',', 'final', 'String', 'charset', ')', '{', 'if', '(', 'charset', '!=', 'null', '&&', 'charset', '.', 'length', '(', ')', '>', 'NUM', ')', '{', 'final', 'String', 'separator', '=', 'STRING', '+', 'PARAM', 'CHARSET', '+', 'STRING', ';', 'return', 'header', '(', 'HEADER', 'CONTENT', 'TYPE', ',', 'content', 'Type', '+', 'separator', '+', 'charset', ')', ';', '}', 'else', 'return', 'header', '(', 'HEADER', 'CONTENT', 'TYPE', ',', 'content', 'Type', ')', ';', '}'], ['private', 'Response', 'require', 'JSON', '(', 'IHTTP', 'Session', 'session', ')', '{', 'final', 'Map', '<', 'String', ',', 'String', '>', 'headers', '=', 'session', '.', 'get', 'Headers', '(', ')', ';', 'if', '(', '!', 'APPLICATION', 'JSON', '.', 'equals', '(', 'headers', '.', 'get', '(', 'CONTENT', 'TYPE', ')', ')', ')', '{', 'return', 'new', 'Fixed', 'Length', 'Response', '(', 'Response', '.', 'Status', '.', 'NOT', 'ACCEPTABLE', ',', 'MIME', 'PLAINTEXT', ',', 'STRING', ')', ';', '}', 'else', '{', 'return', 'null', ';', '}', '}'], ['void', 'register', 'Local', 'Symbol', '(', 'String', 'source', 'File', ',', 'String', 'full', 'Local', 'Name', ',', 'String', 'required', 'Namespace', ',', 'String', 'local', 'Name', ')', '{', 'value', 'Rewrite', '.', 'put', '(', 'source', 'File', ',', 'full', 'Local', 'Name', ',', 'local', 'Name', ')', ';', 'type', 'Rewrite', '.', 'put', '(', 'source', 'File', ',', 'full', 'Local', 'Name', ',', 'local', 'Name', ')', ';', 'type', 'Rewrite', '.', 'put', '(', 'source', 'File', ',', 'required', 'Namespace', ',', 'local', 'Name', ')', ';', '}'], ['public', 'static', 'boolean', 'equal', 'Over', 'Shorter', 'Of', 'Both', '(', 'byte', '[', ']', 'a', ',', 'byte', '[', ']', 'b', ')', '{', 'int', 'top', '=', 'Math', '.', 'min', '(', 'a', '.', 'length', ',', 'b', '.', 'length', ')', ';', 'for', '(', 'int', 'i', '=', 'NUM', ';', 'i', '<', 'top', ';', 'i', '++', ')', '{', 'if', '(', 'a', '[', 'i', ']', '!=', 'b', '[', 'i', ']', ')', 'return', 'BOOL', ';', '}', 'return', 'BOOL', ';', '}'], ['public', 'static', 'Lazy', 'Query', 'Container', 'create', 'Lazy', 'Query', 'Container', '(', 'final', 'Bean', 'Query', 'Factory', '<', '?', 'extends', 'Abstract', 'Bean', 'Query', '<', '?', '>', '>', 'query', 'Factory', ')', '{', 'query', 'Factory', '.', 'set', 'Query', 'Configuration', '(', 'Collections', '.', 'empty', 'Map', '(', ')', ')', ';', 'return', 'new', 'Lazy', 'Query', 'Container', '(', 'new', 'Lazy', 'Query', 'Definition', '(', 'BOOL', ',', 'NUM', ',', 'SPUI', 'Label', 'Definitions', '.', 'VAR', 'NAME', ')', ',', 'query', 'Factory', ')', ';', '}'], ['public', 'static', 'Refresh', 'Token', 'Credentials', 'create', '(', 'Oauth', 'Client', 'oauth', 'Config', ',', 'String', 'refresh', 'Token', 'Secret', ',', 'String', 'token', 'Exchange', 'Url', ')', '{', 'Refresh', 'Request', 'Factory', 'request', 'Factory', '=', 'new', 'Refresh', 'Request', 'Factory', '(', ')', ';', 'Clock', 'clock', '=', 'Clock', '.', 'system', 'Default', 'Zone', '(', ')', ';', 'return', 'new', 'Refresh', 'Token', 'Credentials', '(', 'request', 'Factory', ',', 'refresh', 'Token', 'Secret', ',', 'token', 'Exchange', 'Url', ',', 'oauth', 'Config', ',', 'clock', ')', ';', '}'], ['public', 'static', 'Fields', 'find', 'By', 'Thrift', 'Id', '(', 'int', 'field', 'Id', ')', '{', 'switch', '(', 'field', 'Id', ')', '{', 'case', 'NUM', ':', 'return', 'TRACE', 'ID', ';', 'case', 'NUM', ':', 'return', 'NAME', ';', 'case', 'NUM', ':', 'return', 'ID', ';', 'case', 'NUM', ':', 'return', 'PARENT', 'ID', ';', 'case', 'NUM', ':', 'return', 'ANNOTATIONS', ';', 'case', 'NUM', ':', 'return', 'BINARY', 'ANNOTATIONS', ';', 'case', 'NUM', ':', 'return', 'DEBUG', ';', 'default', ':', 'return', 'null', ';', '}', '}'], ['public', 'boolean', 'has', 'Android', 'Plugin', '(', ')', '{', 'List', '<', 'String', '>', 'plugins', '=', 'get', 'Plugins', '(', ')', ';', 'return', 'plugins', '.', 'contains', '(', 'Gradle', 'Detector', '.', 'APP', 'PLUGIN', 'ID', ')', '||', 'plugins', '.', 'contains', '(', 'Gradle', 'Detector', '.', 'OLD', 'APP', 'PLUGIN', 'ID', ')', '||', 'plugins', '.', 'contains', '(', 'Gradle', 'Detector', '.', 'LIB', 'PLUGIN', 'ID', ')', '||', 'plugins', '.', 'contains', '(', 'Gradle', 'Detector', '.', 'OLD', 'LIB', 'PLUGIN', 'ID', ')', ';', '}'], ['private', 'List', '<', 'File', 'Path', '>', 'list', 'Seqno', 'Files', '(', ')', '{', 'Linked', 'List', '<', 'File', 'Path', '>', 'children', '=', 'new', 'Linked', 'List', '<', 'File', 'Path', '>', '(', ')', ';', 'for', '(', 'String', 'file', 'Name', ':', 'list', 'Seqno', 'File', 'Names', '(', ')', ')', '{', 'File', 'Path', 'fp', '=', 'new', 'File', 'Path', '(', 'service', 'Dir', ',', 'file', 'Name', ')', ';', 'children', '.', 'add', '(', 'fp', ')', ';', '}', 'return', 'children', ';', '}'], ['public', 'static', 'boolean', 'load', 'Native', 'Library', '(', ')', '{', 'try', '{', 'Log', '.', 'i', '(', 'TAG', ',', 'STRING', '+', 'LIBRARY', 'NAME', ')', ';', 'System', '.', 'load', 'Library', '(', 'STRING', ')', ';', 'System', '.', 'load', 'Library', '(', 'LIBRARY', 'NAME', ')', ';', '}', 'catch', '(', 'Exception', 'e', ')', '{', 'Log', '.', 'e', '(', 'TAG', ',', 'STRING', '+', 'e', '.', 'to', 'String', '(', ')', ')', ';', 'return', 'BOOL', ';', '}', 'return', 'BOOL', ';', '}'], ['public', 'Metadata', 'Editor', 'Compat', 'put', 'Bitmap', '(', 'int', 'key', ',', 'Bitmap', 'bitmap', ')', '{', 'if', '(', 's', 'Has', 'Remote', 'Control', 'AP', 'Is', ')', '{', 'try', '{', 'm', 'Put', 'Bitmap', 'Method', '.', 'invoke', '(', 'm', 'Actual', 'Metadata', 'Editor', ',', 'key', ',', 'bitmap', ')', ';', '}', 'catch', '(', 'Exception', 'e', ')', '{', 'throw', 'new', 'Runtime', 'Exception', '(', 'e', '.', 'get', 'Message', '(', ')', ',', 'e', ')', ';', '}', '}', 'return', 'this', ';', '}'], ['private', 'static', 'Buffered', 'Image', 'expand', 'Gray', 'Thumb', '(', 'Buffered', 'Image', 'thumb', ')', '{', 'Buffered', 'Image', 'ret', '=', 'new', 'Buffered', 'Image', '(', 'thumb', '.', 'get', 'Width', '(', ')', ',', 'thumb', '.', 'get', 'Height', '(', ')', ',', 'Buffered', 'Image', '.', 'TYPE', 'INT', 'RGB', ')', ';', 'Graphics', 'g', '=', 'ret', '.', 'get', 'Graphics', '(', ')', ';', 'g', '.', 'draw', 'Image', '(', 'thumb', ',', 'NUM', ',', 'NUM', ',', 'null', ')', ';', 'return', 'ret', ';', '}'], ['private', 'boolean', 'is', 'Synthetic', '(', 'Field', 'Or', 'Method', 'member', ')', '{', 'if', '(', 'BCEL', 'Util', '.', 'is', 'Synthetic', '(', 'member', ')', ')', '{', 'return', 'BOOL', ';', '}', 'String', 'name', '=', 'member', '.', 'get', 'Name', '(', ')', ';', 'if', '(', 'name', '.', 'starts', 'With', '(', 'STRING', ')', ')', '{', 'return', 'BOOL', ';', '}', 'if', '(', 'name', '.', 'starts', 'With', '(', 'STRING', ')', ')', '{', 'return', 'BOOL', ';', '}', 'return', 'BOOL', ';', '}'], ['public', 'static', 'Disc', 'Cache', 'Aware', 'create', 'Reserve', 'Disc', 'Cache', '(', 'File', 'cache', 'Dir', ')', '{', 'File', 'individual', 'Dir', '=', 'new', 'File', '(', 'cache', 'Dir', ',', 'STRING', ')', ';', 'if', '(', 'individual', 'Dir', '.', 'exists', '(', ')', '||', 'individual', 'Dir', '.', 'mkdir', '(', ')', ')', '{', 'cache', 'Dir', '=', 'individual', 'Dir', ';', '}', 'return', 'new', 'Total', 'Size', 'Limited', 'Disc', 'Cache', '(', 'cache', 'Dir', ',', 'NUM', '*', 'NUM', '*', 'NUM', ')', ';', '}'], ['public', 'static', 'byte', '[', ']', 'to', 'Byte', 'Array', '(', 'Input', 'Stream', 'input', 'Stream', ',', 'final', 'int', 'size', ')', 'throws', 'IO', 'Exception', '{', 'Byte', 'Array', 'Output', 'Stream', 'out', '=', 'new', 'Byte', 'Array', 'Output', 'Stream', '(', ')', ';', 'long', 'length', '=', 'size', '==', '-', 'NUM', '?', 'Long', '.', 'MAX', 'VALUE', ':', 'size', ';', 'pipe', '(', 'input', 'Stream', ',', 'out', ',', 'length', ')', ';', 'return', 'out', '.', 'to', 'Byte', 'Array', '(', ')', ';', '}'], ['void', 'expand', 'Capacity', '(', 'int', 'minimum', 'Capacity', ')', '{', 'int', 'new', 'Capacity', '=', '(', 'value', '.', 'length', '+', 'NUM', ')', '*', 'NUM', ';', 'if', '(', 'new', 'Capacity', '<', 'NUM', ')', '{', 'new', 'Capacity', '=', 'Integer', '.', 'MAX', 'VALUE', ';', '}', 'else', 'if', '(', 'minimum', 'Capacity', '>', 'new', 'Capacity', ')', '{', 'new', 'Capacity', '=', 'minimum', 'Capacity', ';', '}', 'value', '=', 'Arrays', '.', 'copy', 'Of', '(', 'value', ',', 'new', 'Capacity', ')', ';', '}'], ['public', 'double', 'distance', 'To', '(', 'Geo', 'Location', 'location', ',', 'double', 'radius', ')', '{', 'return', 'Math', '.', 'acos', '(', 'Math', '.', 'sin', '(', 'rad', 'Lat', ')', '*', 'Math', '.', 'sin', '(', 'location', '.', 'rad', 'Lat', ')', '+', 'Math', '.', 'cos', '(', 'rad', 'Lat', ')', '*', 'Math', '.', 'cos', '(', 'location', '.', 'rad', 'Lat', ')', '*', 'Math', '.', 'cos', '(', 'rad', 'Lon', '-', 'location', '.', 'rad', 'Lon', ')', ')', '*', 'radius', ';', '}']], 'summ_text': ['ensures there is enough space in the buffer for the given number of additional bytes .', 'ensures there is enough space in the buffer for the given number of additional bytes .', 'ensures there is enough space in the buffer for the given number of additional bytes .', "encloses the incoming string inside double quotes , if it isn ' t already quoted .", 'ensures there is enough space in the buffer for the given number of additional bytes .', 'ensures there is enough space in the buffer for the given number of additional bytes .', 'creates reserve disk cache folder which will be used if primary disk cache folder becomes unavailable', 'create a string that is a random sample ( with replacement ) from the given string', 'create a string that is a random sample ( with replacement ) from the given string', 'this is to implement memory allocation in the array . like malloc ( ) .', 'try finishing the tile store withan adjustment color and blend mode for the tilesets .', 'this is to implement memory allocation in the array . like malloc ( ) .', "set the ' content - type ' request header to the given value and charset", 'adds a listener interested in the progress of the upload for a concrete file .', 'gets the localization of a key , but applying a set of replacement strings .', "set the ' content - type ' request header to the given value and charset", 'ensures that the supplied data has the " content - type " set to json', 'saves the local name for imported symbols to be used for code rewriting later .', 'determines whether two byte arrays are equalovershorterofboth over the whole minimum of their two lengths', 'create a lazy query container for the given query bean factory with empty configurations .', 'create a new set of credentials for the given refresh token and oauth configuration .', 'find the _fields constant that matches fieldid , or null if its not found .', 'returns true if the build file uses the android or android - library plugin .', 'return a list of seqno file paths or an empty list of none exist .', 'attempts to load the native library so that native functions can be called .', 'sets the album / artwork picture to be displayed on the remote control .', 'return an rgb image that is the expansion of the given grayscale image .', 'figure out if a class member ( field or method ) is synthetic .', 'creates reserve disc cache which will be used if primary disc cache becomes unavailable', 'converts ( a portion ) of the given stream to a byte array .', 'this implements the expansion semantics of ensurecapacity with no size check or synchronization .', 'computes the great circle distance between this geolocation instance and the location argument .'], 'summ_tokens': [['<s>', 'ensures', 'there', 'is', 'enough', 'space', 'in', 'the', 'buffer', 'for', 'the', 'given', 'number', 'of', 'additional', 'bytes', '.', '</s>'], ['<s>', 'ensures', 'there', 'is', 'enough', 'space', 'in', 'the', 'buffer', 'for', 'the', 'given', 'number', 'of', 'additional', 'bytes', '.', '</s>'], ['<s>', 'ensures', 'there', 'is', 'enough', 'space', 'in', 'the', 'buffer', 'for', 'the', 'given', 'number', 'of', 'additional', 'bytes', '.', '</s>'], ['<s>', 'encloses', 'the', 'incoming', 'string', 'inside', 'double', 'quotes', ',', 'if', 'it', 'isn', "'", 't', 'already', 'quoted', '.', '</s>'], ['<s>', 'ensures', 'there', 'is', 'enough', 'space', 'in', 'the', 'buffer', 'for', 'the', 'given', 'number', 'of', 'additional', 'bytes', '.', '</s>'], ['<s>', 'ensures', 'there', 'is', 'enough', 'space', 'in', 'the', 'buffer', 'for', 'the', 'given', 'number', 'of', 'additional', 'bytes', '.', '</s>'], ['<s>', 'creates', 'reserve', 'disk', 'cache', 'folder', 'which', 'will', 'be', 'used', 'if', 'primary', 'disk', 'cache', 'folder', 'becomes', 'unavailable', '</s>'], ['<s>', 'create', 'a', 'string', 'that', 'is', 'a', 'random', 'sample', '(', 'with', 'replacement', ')', 'from', 'the', 'given', 'string', '</s>'], ['<s>', 'create', 'a', 'string', 'that', 'is', 'a', 'random', 'sample', '(', 'with', 'replacement', ')', 'from', 'the', 'given', 'string', '</s>'], ['<s>', 'this', 'is', 'to', 'implement', 'memory', 'allocation', 'in', 'the', 'array', '.', 'like', 'malloc', '(', ')', '.', '</s>'], ['<s>', 'try', 'finishing', 'the', 'tile', 'store', 'withan', 'adjustment', 'color', 'and', 'blend', 'mode', 'for', 'the', 'tilesets', '.', '</s>'], ['<s>', 'this', 'is', 'to', 'implement', 'memory', 'allocation', 'in', 'the', 'array', '.', 'like', 'malloc', '(', ')', '.', '</s>'], ['<s>', 'set', 'the', "'", 'content', '-', 'type', "'", 'request', 'header', 'to', 'the', 'given', 'value', 'and', 'charset', '</s>'], ['<s>', 'adds', 'a', 'listener', 'interested', 'in', 'the', 'progress', 'of', 'the', 'upload', 'for', 'a', 'concrete', 'file', '.', '</s>'], ['<s>', 'gets', 'the', 'localization', 'of', 'a', 'key', ',', 'but', 'applying', 'a', 'set', 'of', 'replacement', 'strings', '.', '</s>'], ['<s>', 'set', 'the', "'", 'content', '-', 'type', "'", 'request', 'header', 'to', 'the', 'given', 'value', 'and', 'charset', '</s>'], ['<s>', 'ensures', 'that', 'the', 'supplied', 'data', 'has', 'the', '"', 'content', '-', 'type', '"', 'set', 'to', 'json', '</s>'], ['<s>', 'saves', 'the', 'local', 'name', 'for', 'imported', 'symbols', 'to', 'be', 'used', 'for', 'code', 'rewriting', 'later', '.', '</s>'], ['<s>', 'determines', 'whether', 'two', 'byte', 'arrays', 'are', 'equalovershorterofboth', 'over', 'the', 'whole', 'minimum', 'of', 'their', 'two', 'lengths', '</s>'], ['<s>', 'create', 'a', 'lazy', 'query', 'container', 'for', 'the', 'given', 'query', 'bean', 'factory', 'with', 'empty', 'configurations', '.', '</s>'], ['<s>', 'create', 'a', 'new', 'set', 'of', 'credentials', 'for', 'the', 'given', 'refresh', 'token', 'and', 'oauth', 'configuration', '.', '</s>'], ['<s>', 'find', 'the', '_fields', 'constant', 'that', 'matches', 'fieldid', ',', 'or', 'null', 'if', 'its', 'not', 'found', '.', '</s>'], ['<s>', 'returns', 'true', 'if', 'the', 'build', 'file', 'uses', 'the', 'android', 'or', 'android', '-', 'library', 'plugin', '.', '</s>'], ['<s>', 'return', 'a', 'list', 'of', 'seqno', 'file', 'paths', 'or', 'an', 'empty', 'list', 'of', 'none', 'exist', '.', '</s>'], ['<s>', 'attempts', 'to', 'load', 'the', 'native', 'library', 'so', 'that', 'native', 'functions', 'can', 'be', 'called', '.', '</s>'], ['<s>', 'sets', 'the', 'album', '/', 'artwork', 'picture', 'to', 'be', 'displayed', 'on', 'the', 'remote', 'control', '.', '</s>'], ['<s>', 'return', 'an', 'rgb', 'image', 'that', 'is', 'the', 'expansion', 'of', 'the', 'given', 'grayscale', 'image', '.', '</s>'], ['<s>', 'figure', 'out', 'if', 'a', 'class', 'member', '(', 'field', 'or', 'method', ')', 'is', 'synthetic', '.', '</s>'], ['<s>', 'creates', 'reserve', 'disc', 'cache', 'which', 'will', 'be', 'used', 'if', 'primary', 'disc', 'cache', 'becomes', 'unavailable', '</s>'], ['<s>', 'converts', '(', 'a', 'portion', ')', 'of', 'the', 'given', 'stream', 'to', 'a', 'byte', 'array', '.', '</s>'], ['<s>', 'this', 'implements', 'the', 'expansion', 'semantics', 'of', 'ensurecapacity', 'with', 'no', 'size', 'check', 'or', 'synchronization', '.', '</s>'], ['<s>', 'computes', 'the', 'great', 'circle', 'distance', 'between', 'this', 'geolocation', 'instance', 'and', 'the', 'location', 'argument', '.', '</s>']], 'src_vocab': [<c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db6661160>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db6665d60>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db6665be0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db6665ee0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db66652b0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db66658b0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db6665cd0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db6665fd0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db6665340>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db6665640>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db6665940>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db66653d0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db66659d0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db6665ca0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db6665e80>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db6665070>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db798a580>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db798ad60>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db798ab80>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db798a970>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db798a3a0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db798ad30>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db7980e50>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db7980820>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db7980430>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db79803a0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db7980f40>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db7980190>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db79807f0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db65df2e0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db65df070>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7f9db65df580>], 'src_map': [tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10,  5, 11, 12,  7, 13, 14, 15, 16,  8,
         9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 15, 27, 28,  5,  5, 11, 12,
         7,  8, 29, 30,  8, 18, 31, 15, 32,  5, 14, 33, 30, 33, 23, 33, 30, 33,
        11,  8, 18, 25, 26, 15, 17, 28,  5, 14,  8, 18, 14, 24, 23, 18, 19]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10,  5, 11, 12,  7, 13, 14, 15, 16,  8,
         9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 15, 27, 28,  5,  5, 11, 12,
         7,  8, 29, 30,  8, 18, 31, 15, 32,  5, 14, 33, 30, 33, 23, 33, 30, 33,
        11,  8, 18, 25, 26, 15, 17, 28,  5, 14,  8, 18, 14, 24, 23, 18, 19]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10,  5, 11, 12,  7, 13, 14, 15, 16,  8,
         9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 15, 27, 28,  5,  5, 11, 12,
         7,  8, 29, 30,  8, 18, 31, 15, 32,  5, 14, 33, 30, 33, 23, 33, 30, 33,
        11,  8, 18, 25, 26, 15, 17, 28,  5, 14,  8, 18, 14, 24, 23, 18, 19]), tensor([ 2,  3,  4,  5,  6,  7,  4,  8,  4,  9, 10, 11, 12,  8,  9, 13, 14, 15,
         9, 16, 17, 18,  8, 10, 10, 11, 19, 14, 20, 21, 12,  8,  9, 16, 22, 23,
         8, 24, 10, 13, 25, 26,  9, 16, 22, 23,  8,  9, 16, 27,  8, 10, 28, 24,
        10, 13, 25, 10, 11, 19,  9, 20, 21, 19, 25, 29,  9, 29, 25, 20, 21]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10,  5, 11, 12,  7, 13, 14, 15, 16,  8,
         9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 15, 27, 28,  5,  5, 11, 12,
         7,  8, 29, 30,  8, 18, 31, 15, 32,  5, 14, 33, 30, 33, 23, 33, 30, 33,
        11,  8, 18, 25, 26, 15, 17, 28,  5, 14,  8, 18, 14, 24, 23, 18, 19]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10,  5, 11, 12,  7, 13, 14, 15, 16,  8,
         9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 15, 27, 28,  5,  5, 11, 12,
         7,  8, 29, 30,  8, 18, 31, 15, 32,  5, 14, 33, 30, 33, 23, 33, 30, 33,
        11,  8, 18, 25, 26, 15, 17, 28,  5, 14,  8, 18, 14, 24, 23, 18, 19]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,  4, 15,  9, 16, 17,
        18, 19, 20,  8, 21, 10, 12, 22, 23, 13, 24,  4, 25,  9, 16, 26,  4, 10,
        15,  9, 22, 27, 13, 24, 28, 10, 25,  9, 19, 29, 10, 13, 30, 25,  9, 19,
        31, 10, 13, 13, 14, 15,  9, 16, 25,  9, 24, 32, 33, 15,  9, 24, 32]), tensor([ 2,  3,  4,  5,  4,  6,  4,  7,  8,  9, 10, 11, 12,  4, 13, 14, 15, 16,
         4, 13,  6, 10, 11, 17, 18,  6,  9, 19, 15, 20, 17, 19, 21, 10, 17, 19,
        22, 11, 14, 23, 24,  6,  7, 23, 25, 26,  6, 27, 28, 23, 29, 30,  6,  7,
        23, 10,  6, 11, 11, 11, 11, 17, 31, 14, 23, 32,  4,  6, 11, 17, 33]), tensor([ 2,  3,  4,  5,  4,  6,  4,  7,  8,  9, 10, 11, 12,  4, 13, 14, 15, 16,
         4, 13,  6, 10, 11, 17, 18,  6,  9, 19, 15, 20, 17, 19, 21, 10, 17, 19,
        22, 11, 14, 23, 24,  6,  7, 23, 25, 26,  6, 27, 28, 23, 29, 30,  6,  7,
        23, 10,  6, 11, 11, 11, 11, 17, 31, 14, 23, 32,  4,  6, 11, 17, 33]), tensor([ 2,  3,  4,  5,  3,  6,  7,  8,  3,  9, 10, 11, 12,  3, 13, 10, 14, 15,
        16, 12, 17,  5, 11, 18,  6, 19, 13,  7,  8, 20, 21, 22, 23, 10, 24, 20,
        21, 13, 18, 25, 26, 22, 12, 27, 15, 28,  5, 14, 29, 30, 29, 23, 29, 30,
        29, 13,  7, 12, 14, 10, 23, 12, 31, 11, 32,  6, 12, 33,  9, 12, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  5,  9, 10, 11, 12, 13,  4, 14, 15, 11, 12,
        13,  4, 14, 16, 17, 18, 19,  4, 11, 11, 12, 20,  4, 21, 22, 23, 24, 25,
        16, 11, 12, 26,  4, 24,  8,  7,  8, 10, 11, 27, 28, 16, 17, 29,  4, 11,
        27, 15, 30, 31, 27, 32, 31, 27, 28, 32, 31, 27, 28, 32, 31, 27, 28]), tensor([ 2,  3,  4,  5,  3,  6,  7,  8,  3,  9, 10, 11, 12,  3, 13, 10, 14, 15,
        16, 12, 17,  5, 11, 18,  6, 19, 13,  7,  8, 20, 21, 22, 23, 10, 24, 20,
        21, 13, 18, 25, 26, 22, 12, 27, 15, 28,  5, 14, 29, 30, 29, 23, 29, 30,
        29, 13,  7, 12, 14, 10, 23, 12, 31, 11, 32,  6, 12, 33,  9, 12, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9,  5,  6, 10,  8,  9, 11, 12, 13, 14,  7,
        11, 15, 16, 17, 11, 18, 19,  7, 12, 20, 21, 12, 13,  8,  9, 22, 23, 24,
        25, 26, 27, 25, 24, 28, 29, 30,  7, 31, 32, 33, 10,  5,  6, 25, 22, 25,
        11, 12, 28, 34, 35, 29, 30,  7, 31, 32, 33, 10,  5,  6, 12, 28, 34]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9,  5,  6,  7, 10, 11, 12, 13, 11, 14, 15,
        16, 17, 18, 19,  8, 13, 20, 21, 22, 16, 20, 21, 22, 10, 20, 21, 17, 23,
        24, 25, 26, 27, 28, 29, 30, 31,  8, 13, 32, 33, 11, 16, 32, 34, 30, 35,
         8, 17, 17, 24, 36, 37, 38, 32, 39,  8, 26, 27, 11, 10, 17, 24, 40]), tensor([ 2,  3,  4,  5,  3,  6,  7,  8,  9,  3,  7,  3, 10, 11, 12, 13,  3, 14,
        15,  4,  5,  6, 12, 16, 17,  5,  8, 18, 19,  9,  3,  7,  3, 10, 20, 21,
        11, 18, 22, 23,  5, 12, 12, 13, 14, 15, 14, 18, 24, 25,  5, 20, 18, 26,
        27,  5, 12,  7, 20, 18, 26, 28,  5, 12, 12, 16, 29, 30, 14, 16, 29]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9,  5,  6, 10,  8,  9, 11, 12, 13, 14,  7,
        11, 15, 16, 17, 11, 18, 19,  7, 12, 20, 21, 12, 13,  8,  9, 22, 23, 24,
        25, 26, 27, 25, 24, 28, 29, 30,  7, 31, 32, 33, 10,  5,  6, 25, 22, 25,
        11, 12, 28, 34, 35, 29, 30,  7, 31, 32, 33, 10,  5,  6, 12, 28, 34]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 15, 17, 18,
        19,  9, 20, 21, 22,  6, 10, 23, 24,  6, 25, 26,  5, 20, 27,  6, 18, 20,
        21,  6, 28, 29, 10, 10, 10, 11, 30, 31, 32, 33,  3,  6,  3, 20, 34, 20,
        35, 36, 16, 37, 38, 16, 39, 10, 23, 40, 41, 11, 30, 42, 23, 40, 40]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10,  7, 11,  4, 12, 10,  7, 13, 14, 10,
         7, 15, 12, 16, 17, 18, 19, 20, 21,  6,  8,  9, 10, 11,  4, 12, 10, 15,
        12, 16, 22, 23, 19, 20, 21,  6,  8,  9, 10, 11,  4, 12, 10, 15, 12, 16,
        22, 23, 19, 20, 21,  6,  8,  9, 10, 13, 14, 10, 15, 12, 16, 22, 24]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 11, 12, 13, 16,
        17, 18, 19, 20, 21, 22, 23, 24, 10, 14, 23, 25, 15, 16, 23, 25, 17, 26,
        27, 10, 19, 28, 21, 29, 26, 28, 30, 20, 26, 28, 31, 17, 18, 32, 10, 14,
        12, 28, 13, 33, 16, 12, 28, 13, 17, 34, 35, 26, 36, 34, 35, 26, 36]), tensor([ 2,  3,  4,  5,  6,  7,  4,  5,  6,  8,  9, 10,  5, 11, 12, 13, 14, 15,
        10,  5, 12, 13, 16, 16, 17, 11, 18, 19, 17, 11, 20, 21,  5, 22,  8, 23,
        20, 24, 25,  8, 18, 18, 26, 27, 28,  4,  5,  6,  8, 28,  4,  5, 29,  8,
        30, 31, 32, 31, 33, 34, 35, 20, 36, 37, 18, 31, 17, 11, 18, 26, 38]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,  5, 16, 13, 14,
        17, 18, 19, 20, 21,  4, 22, 23, 24, 23, 25, 26,  4, 22, 23,  8, 20, 27,
        28, 29, 25, 28, 30, 31, 32, 33,  8, 20, 27, 34, 26,  4,  5,  6,  8, 24,
        23, 13, 15,  5, 16, 13, 17, 18, 19, 13, 11, 12, 13, 29, 20, 27, 35]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  8, 12, 13, 14,  9, 11,  8, 12,
        13, 15, 16, 17, 18, 19, 20, 21, 15, 16, 17, 18, 22, 21, 15, 16, 17, 18,
        20, 21, 15, 16, 17, 18, 23, 20, 21, 15, 16, 17, 18, 24, 21, 15, 16, 17,
        18, 25, 24, 21, 15, 16, 17, 18, 26, 21, 27, 17, 18, 28, 21, 29, 29]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,  7,  8,
        18, 19, 14, 20, 21,  7, 22, 23, 20, 24, 25, 26,  8, 27, 14, 20, 21,  7,
        22, 23, 20, 28, 24, 25, 26,  8, 27, 14, 20, 21,  7, 22, 23, 20, 29, 25,
        26,  8, 27, 14, 20, 21,  7, 22, 23, 20, 28, 29, 25, 26,  8, 18, 30]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,  3,  4,  5,  6,  7,
        15, 16, 17, 14,  3,  4,  5,  6,  7, 11, 12, 18, 19, 11, 20, 21, 22, 23,
         8,  9,  5, 24, 11, 12, 12, 13,  5,  6, 25, 16, 17,  5,  6, 11, 26, 27,
        28, 21, 22, 12, 18, 15, 29, 30, 11, 25, 12, 18, 31, 32, 15, 18, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 10, 12, 13, 14,  8, 15, 16, 17,
        18, 19, 20,  9, 21, 22, 13,  5,  7,  8, 17,  9, 21, 22, 13,  5,  7,  8,
        19, 20,  9, 21, 23, 24,  8, 25, 26,  9, 10, 12, 13, 26,  8, 15, 16, 17,
        18, 26, 13, 27, 28,  8,  9,  9, 21, 29, 30, 21, 23, 29, 30, 21, 23]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  7, 12, 13, 14, 15,  8, 16, 17,
        18, 19, 20, 21, 13, 14, 22, 14, 23, 24,  7, 25, 26, 27,  8, 23, 28,  3,
         4, 11, 10, 11, 12, 13, 29, 30, 31,  8, 32, 33, 13, 14, 34, 35, 36, 32,
         8, 33, 26, 37, 38,  8, 13, 11, 33, 13, 29, 30, 30, 39, 40, 29, 30]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9,  4,  5, 10, 11, 12,  4,  5, 13, 14, 15,
         4,  5,  9, 10, 16, 17, 18,  9, 11, 19, 10, 16, 17, 20,  9, 11, 19,  4,
         5, 16, 21, 22, 23, 11, 24, 25, 26, 14, 13, 16, 17, 25,  9, 11, 24, 26,
        16, 27,  5,  9, 10, 19, 28, 19, 28, 19, 29, 11, 24, 30, 13, 24, 31]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  6, 14, 15, 16,  4,  5,
         6, 10, 11, 11, 12, 17, 18, 19, 20, 21, 22, 23, 10, 16, 24, 25,  6, 11,
        19, 13,  6, 22, 16, 26, 27,  6, 28, 11, 11, 12, 17, 18, 19, 20, 13,  6,
        22, 16, 26, 27,  6, 28, 11, 11, 12, 17, 18, 19, 20, 17, 18, 19, 20]), tensor([ 2,  3,  4,  5,  6,  7,  8,  4,  5,  9, 10, 11, 12, 13, 14, 10, 15, 12,
        16, 17, 10,  9, 11, 12, 18, 19, 13, 20, 21,  9, 15, 12, 22, 23,  9, 13,
        24, 15, 12, 22, 25,  9, 13, 13, 14, 11, 12, 16, 15, 12, 20, 26, 27, 17,
        28, 29, 30,  4,  5,  9, 11, 12, 18, 31, 32, 31, 32, 31, 13, 20, 26]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 12, 14, 15, 16, 17, 18,
        19, 20, 21, 22,  8,  9, 23, 12, 24, 25, 26,  8,  9, 23, 12, 10, 18, 27,
        28, 29, 25, 17, 30, 31, 32, 33, 34, 35, 36, 37, 38, 17, 27, 39, 10, 13,
        12, 14, 24, 14, 29, 18, 27, 40, 24, 35,  7,  8,  9, 10, 18, 27, 41]), tensor([ 2,  3,  4,  5,  6,  7,  4,  8,  9,  6, 10,  4, 11,  5, 12, 13, 14, 15,
        16,  8, 17, 16, 18, 19,  5, 10,  4, 20, 16,  8,  9, 10,  4, 11, 21, 13,
        22, 23, 18, 24, 25, 19,  5,  7,  4, 26, 10,  4,  8,  9, 10,  4, 11,  7,
         4, 18, 24, 12, 11, 27, 13, 28, 29,  5, 12, 30, 10,  4,  8, 18, 24]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10,  3, 11, 12, 13, 14, 15, 16, 17,  6,
        15, 16, 18,  6, 19, 20, 12, 21, 15, 16, 18,  6,  9, 16, 19, 20, 12, 22,
        15, 16, 23,  6, 19, 20, 12, 21, 15, 16, 23,  6,  9, 16, 19, 20, 12, 21,
        15, 16, 23,  6, 19, 24, 25,  9, 16, 19, 24, 12, 12, 21, 11, 26, 27])], 'alignment': [tensor([ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 15,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 15,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 15,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  1,  1, 12,  1,  1,  1,  1,  1,  1, 16,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 15,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 15,  1]), tensor([ 1,  1,  1,  1, 15,  1,  1,  1,  1,  1, 28,  1,  1, 15,  1,  1,  1,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  5,  1,  6,  1,  1, 11,  1,  1,  1,  1,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  5,  1,  6,  1,  1, 11,  1,  1,  1,  1,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  1,  1, 14, 15,  1,  1,  5,  7, 15,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  1,  7,  1, 10,  1, 20,  1, 16, 17,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  1,  1, 14, 15,  1,  1,  5,  7, 15,  1]), tensor([ 1,  1,  1,  1,  5,  1,  1,  1,  1, 30,  1,  1,  1,  1,  1, 11,  1]), tensor([ 1,  1,  1, 10,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 16, 32,  1]), tensor([ 1,  1,  1,  1,  1,  1,  6,  7,  1,  1,  1,  1,  1, 20,  1, 18,  1]), tensor([ 1,  1,  1,  1,  5,  1,  1,  1,  1, 30,  1,  1,  1,  1,  1, 11,  1]), tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), tensor([ 1,  1,  1, 15,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 20,  1]), tensor([ 1,  1,  1,  1, 11,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1,  7,  1,  1, 17,  1,  1,  1,  1, 17,  1,  1,  1, 24,  1, 20,  1]), tensor([ 1,  7,  1, 26,  1,  1,  1,  1,  1,  1, 15, 17,  1, 11,  1, 30,  1]), tensor([ 1,  5,  1,  1,  1,  1,  1,  1,  1,  1, 28,  1,  1,  1,  1,  1,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 20,  1]), tensor([ 1, 32,  1,  8,  1,  1, 21,  1,  1,  1,  1,  8,  1,  1,  1, 29,  1]), tensor([ 1,  1, 27,  5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 13,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 26,  1]), tensor([ 1, 30,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 16,  1]), tensor([ 1,  1,  1, 13,  1,  1, 10,  6,  1,  1,  1, 11,  4,  1, 16,  1]), tensor([ 1,  1,  1,  1, 11,  1,  1,  1,  1, 21,  1,  1, 11,  1,  1,  1]), tensor([ 1,  1, 10,  1,  1, 18,  1,  1,  1,  1,  7,  1,  4,  1, 35,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 13,  1]), tensor([ 1,  1,  1,  1,  1,  4,  1,  1,  1,  1,  1,  1,  9,  1, 16,  1])], 'stype': [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]}